{"version":3,"sources":["../src/listenDevices.js"],"names":["delay","listenDevicesPollingSkip","debug","events","setMaxListeners","listDevices","flatDevice","d","path","getFlatDevices","map","getDeviceByPaths","find","paths","includes","lastDevices","poll","changeFound","currentDevices","newDevices","filter","length","emit","removeDevices","debouncedPoll","attachDetected","device","on","detachDetected","stop","cancel","removeListener"],"mappings":";;;;;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,UACbA,KADa,EAEbC,wBAFa,EAGbC,KAHa,EAOV;AACH,MAAMC,SAAS,sBAAf;AACAA,SAAOC,eAAP,CAAuB,CAAvB;;AAEA,MAAIC,cAAc,2BAAlB;;AAEA,MAAMC,aAAa,SAAbA,UAAa;AAAA,WAAKC,EAAEC,IAAP;AAAA,GAAnB;;AAEA,MAAMC,iBAAiB,SAAjBA,cAAiB;AAAA,sDAClB,kBAAQ,4BAAaC,GAAb,CAAiB;AAAA,aAAKJ,WAAWC,CAAX,CAAL;AAAA,KAAjB,CAAR,CADkB;AAAA,GAAvB;;AAIA,MAAMI,mBAAmB,SAAnBA,gBAAmB;AAAA,WACvBN,YAAYO,IAAZ,CAAiB;AAAA,aAAKC,MAAMC,QAAN,CAAeR,WAAWC,CAAX,CAAf,CAAL;AAAA,KAAjB,CADuB;AAAA,GAAzB;;AAGA,MAAIQ,cAAcN,gBAAlB;;AAEA,MAAMO,OAAO,SAAPA,IAAO,GAAM;AACjB,QAAI,CAACf,0BAAL,EAAiC;AAC/BC,YAAM,sCAAN;;AAEA,UAAIe,cAAc,KAAlB;AACA,UAAMC,iBAAiBT,gBAAvB;AACA,UAAMU,aAAaD,eAAeE,MAAf,CAAsB;AAAA,eAAK,CAACL,YAAYD,QAAZ,CAAqBP,CAArB,CAAN;AAAA,OAAtB,CAAnB;;AAEA,UAAIY,WAAWE,MAAX,GAAoB,CAAxB,EAA2B;AACzBnB,cAAM,mBAAN,EAA2BiB,UAA3B;;AAEAd,sBAAc,2BAAd;AACAF,eAAOmB,IAAP,CAAY,KAAZ,EAAmBX,iBAAiBQ,UAAjB,CAAnB;;AAEAF,sBAAc,IAAd;AACD,OAPD,MAOO;AACLf,cAAM,qBAAN;AACD;;AAED,UAAMqB,gBAAgBR,YAAYK,MAAZ,CACpB;AAAA,eAAK,CAACF,eAAeJ,QAAf,CAAwBP,CAAxB,CAAN;AAAA,OADoB,CAAtB;;AAIA,UAAIgB,cAAcF,MAAd,GAAuB,CAA3B,EAA8B;AAC5BnB,cAAM,uBAAN,EAA+BqB,aAA/B;;AAEApB,eAAOmB,IAAP,CAAY,QAAZ,EAAsBX,iBAAiBY,aAAjB,CAAtB;AACAlB,sBAAcA,YAAYe,MAAZ,CACZ;AAAA,iBAAK,CAACG,cAAcT,QAAd,CAAuBR,WAAWC,CAAX,CAAvB,CAAN;AAAA,SADY,CAAd;;AAIAU,sBAAc,IAAd;AACD,OATD,MASO;AACLf,cAAM,yBAAN;AACD;;AAED,UAAIe,WAAJ,EAAiB;AACfF,sBAAcG,cAAd;AACD;AACF,KAtCD,MAsCO;AACLhB,YAAM,gCAAN;AACAsB;AACD;AACF,GA3CD;;AA6CA,MAAMA,gBAAgB,wBAASR,IAAT,EAAehB,KAAf,CAAtB;;AAEA,MAAMyB,iBAAiB,SAAjBA,cAAiB,SAAU;AAC/BvB,UAAM,sBAAN,EAA8BwB,MAA9B;;AAEAF;AACD,GAJD;AAKA,gBAAIG,EAAJ,CAAO,QAAP,EAAiBF,cAAjB;AACAvB,QAAM,uBAAN;;AAEA,MAAM0B,iBAAiB,SAAjBA,cAAiB,SAAU;AAC/B1B,UAAM,0BAAN,EAAkCwB,MAAlC;;AAEAF;AACD,GAJD;AAKA,gBAAIG,EAAJ,CAAO,QAAP,EAAiBC,cAAjB;AACA1B,QAAM,uBAAN;;AAEA,SAAO;AACL2B,UAAM,gBAAM;AACV3B,YACE,0EADF;AAGAsB,oBAAcM,MAAd;AACA,oBAAIC,cAAJ,CAAmB,QAAnB,EAA6BN,cAA7B;AACA,oBAAIM,cAAJ,CAAmB,QAAnB,EAA6BH,cAA7B;AACD,KARI;AASLzB;AATK,GAAP;AAWD,C","file":"listenDevices.js","sourcesContent":["// @flow\n\nimport EventEmitter from \"events\";\nimport usb from \"usb\";\nimport debounce from \"lodash/debounce\";\nimport getDevices from \"./getDevices\";\n\nexport default (\n  delay: number,\n  listenDevicesPollingSkip: () => boolean,\n  debug: (...any) => void\n): {\n  events: EventEmitter,\n  stop: () => void\n} => {\n  const events = new EventEmitter();\n  events.setMaxListeners(0);\n\n  let listDevices = getDevices();\n\n  const flatDevice = d => d.path;\n\n  const getFlatDevices = () => [\n    ...new Set(getDevices().map(d => flatDevice(d)))\n  ];\n\n  const getDeviceByPaths = paths =>\n    listDevices.find(d => paths.includes(flatDevice(d)));\n\n  let lastDevices = getFlatDevices();\n\n  const poll = () => {\n    if (!listenDevicesPollingSkip()) {\n      debug(\"Polling for added or removed devices\");\n\n      let changeFound = false;\n      const currentDevices = getFlatDevices();\n      const newDevices = currentDevices.filter(d => !lastDevices.includes(d));\n\n      if (newDevices.length > 0) {\n        debug(\"New device found:\", newDevices);\n\n        listDevices = getDevices();\n        events.emit(\"add\", getDeviceByPaths(newDevices));\n\n        changeFound = true;\n      } else {\n        debug(\"No new device found\");\n      }\n\n      const removeDevices = lastDevices.filter(\n        d => !currentDevices.includes(d)\n      );\n\n      if (removeDevices.length > 0) {\n        debug(\"Removed device found:\", removeDevices);\n\n        events.emit(\"remove\", getDeviceByPaths(removeDevices));\n        listDevices = listDevices.filter(\n          d => !removeDevices.includes(flatDevice(d))\n        );\n\n        changeFound = true;\n      } else {\n        debug(\"No removed device found\");\n      }\n\n      if (changeFound) {\n        lastDevices = currentDevices;\n      }\n    } else {\n      debug(\"Polling skipped, re-debouncing\");\n      debouncedPoll();\n    }\n  };\n\n  const debouncedPoll = debounce(poll, delay);\n\n  const attachDetected = device => {\n    debug(\"Device add detected:\", device);\n\n    debouncedPoll();\n  };\n  usb.on(\"attach\", attachDetected);\n  debug(\"attach listener added\");\n\n  const detachDetected = device => {\n    debug(\"Device removal detected:\", device);\n\n    debouncedPoll();\n  };\n  usb.on(\"detach\", detachDetected);\n  debug(\"detach listener added\");\n\n  return {\n    stop: () => {\n      debug(\n        \"Stop received, removing listeners and cancelling pending debounced polls\"\n      );\n      debouncedPoll.cancel();\n      usb.removeListener(\"attach\", attachDetected);\n      usb.removeListener(\"detach\", detachDetected);\n    },\n    events\n  };\n};\n"]}